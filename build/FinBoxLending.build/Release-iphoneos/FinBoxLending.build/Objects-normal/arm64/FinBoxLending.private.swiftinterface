// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FinBoxLending
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Combine
import CoreLocation
@_exported import FinBoxLending
import Foundation
import PDFKit
import Swift
import SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor @preconcurrency public struct LendingView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public let lendingResult: ((FinBoxLending.FinBoxJourneyResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public init(lendingResult: @escaping (FinBoxLending.FinBoxJourneyResult) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13FinBoxLending0C4ViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class FinBoxLending {
  public class Builder {
    public init()
    public func customerID(id: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func apiKey(key: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func userToken(token: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func environment(env: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func creditLineAmount(amount: Swift.Float) -> FinBoxLending.FinBoxLending.Builder
    public func creditLineTransactionID(transactionID: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func showToolBar(show: Swift.Bool) -> FinBoxLending.FinBoxLending.Builder
    public func hidePoweredBy(hide: Swift.Bool) -> FinBoxLending.FinBoxLending.Builder
    public func dcEnabled(enabled: Swift.Bool) -> FinBoxLending.FinBoxLending.Builder
    public func utmTerm(utmTerm: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmSource(utmSource: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmMedium(utmMedium: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmContent(utmContent: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmCampaign(utmCampaign: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmPartnerName(utmPartnerName: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func utmPartnerMedium(utmPartnerMedium: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func appsflyerId(appsflyerId: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func idfa(idfa: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func advertisingId(advertisingId: Swift.String) -> FinBoxLending.FinBoxLending.Builder
    public func build() -> FinBoxLending.FinBoxLending
    public func savePreferences(customerID: Swift.String, apiKey: Swift.String, userToken: Swift.String, environment: Swift.String, creditLineAmount: Swift.Float?, creditLineTransactionID: Swift.String?, showToolBar: Swift.Bool, hidePoweredBy: Swift.Bool, dcEnabled: Swift.Bool, utmTerm: Swift.String?, utmSource: Swift.String?, utmContent: Swift.String?, utmMedium: Swift.String?, utmCampaign: Swift.String?, utmPartnerName: Swift.String?, utmPartnerMedium: Swift.String?, appsflyerId: Swift.String?, idfa: Swift.String?, advertisingId: Swift.String?)
    @objc deinit
  }
  @objc deinit
}
public enum LendingEnvironment : Swift.String {
  case UAT, PROD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FinBoxJourneyResult : Swift.Codable {
  public var code: Swift.String?
  public var screen: Swift.String?
  public var message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension FinBoxLending.LendingView : Swift.Sendable {}
extension FinBoxLending.LendingEnvironment : Swift.Equatable {}
extension FinBoxLending.LendingEnvironment : Swift.Hashable {}
extension FinBoxLending.LendingEnvironment : Swift.RawRepresentable {}
